version: 2.1

aliases:
    - &restore_cache
        name: Restore Yarn Package Cache
        keys:
            - packages-{{ checksum "./yarn.lock" }}

    - &save_cache
        name: Save Yarn Package Cache
        key: packages-{{ checksum "./yarn.lock" }}
        paths:
            - ./node_modules
            - ~/.cache/yarn

    - &install_npm_packages
        name: Install Dependencies
        command: yarn install --frozen-lockfile

fe_defaults: &fe_defaults
    docker:
        - image: circleci/node:12.20.1
    working_directory: ~/project

jobs:
    prepare-dependencies:
        <<: *fe_defaults
        steps:
            - checkout
            - restore_cache: *restore_cache
            - run: *install_npm_packages
            - save_cache: *save_cache
            - persist_to_workspace:
                root: .
                paths:
                    - .

    linter:
        <<: *fe_defaults
        steps:
            - attach_workspace:
                at: .
            - run: yarn run ci:lint
            - store_test_results:
                path: reports/junit
            - store_artifacts:
                path: reports/junit
                destination: junit

    unit_tests:
        <<: *fe_defaults
        steps:
            - attach_workspace:
                at: .
            - run: yarn test
            - store_test_results:
                path: reports/junit
            - store_artifacts:
                path: reports/junit
                destination: junit
            - store_artifacts:
                path: coverage
                destination: coverage

    publish:
        <<: *fe_defaults
        environment:
            SENTRY_ORG: lstn-x6
            SENTRY_PROJECT: player
            SENTRY_PROJECT_SDK: player-sdk
            SENTRY_PROJECT_REPO: SpeechKit/speechkit-audio-player-v2
            SPKT_API_PURGE_CACHE: https://app.speechkit.io/api/admin/purge_proxy_cache
        steps:
            - attach_workspace:
                at: .
            - run:
                name: Check version
                command: |
                    PACKAGE_NAME=$(node -p "require('./packages/player/package.json').name")
                    RELEASE_VERSION=$(node -p "require('./packages/player/package.json').version")
                    IS_HAVE_VERSION=$(npm view "$PACKAGE_NAME@$RELEASE_VERSION" version)
                    if [ -n "$IS_HAVE_VERSION" ]; then
                        echo "version exists -> $IS_HAVE_VERSION"
                        circleci step halt
                    fi
            - run: sudo apt-get install -y cpio
            - run: yarn run dist:build
            - run: |
                curl -sL https://sentry.io/get-cli/ | bash
                export RELEASE_VERSION=$(node -p "require('./dist/package.json').version")
                export SENTRY_RELEASE=$(sentry-cli releases propose-version)
                sentry-cli releases new -p $SENTRY_PROJECT -p $SENTRY_PROJECT_SDK "$RELEASE_VERSION"
                sentry-cli releases set-commits "$RELEASE_VERSION" --commit "$SENTRY_PROJECT_REPO@$SENTRY_RELEASE"
                sentry-cli releases files "$RELEASE_VERSION" upload-sourcemaps ./dist/sourcemap/module --url-prefix '~/module'
                sentry-cli releases files "$RELEASE_VERSION" upload-sourcemaps ./dist/sourcemap/systemjs --url-prefix '~/systemjs'
                sentry-cli releases finalize "$RELEASE_VERSION"
            - deploy:
                name: Publish to NPM
                command: |
                    cd ./dist || exit 1
                    rm -rf ./sourcemap/
                    echo "//registry.npmjs.org/:_authToken=$SPKT_NPM_TOKEN" >> .npmrc
                    npm publish --access public --unsafe-perm
            - run:
                name: Purge cache after publish
                command: |
                    RELEASE_VERSION=$(node -p "require('./dist/package.json').version")
                    curl --request GET --url "$SPKT_API_PURGE_CACHE?api_key=$SPKT_API_KEY&player_version=$RELEASE_VERSION"

parameters:
    run_tests:
        type: boolean
        default: false

workflows:
    version: 2
    test_and_deploy:
        unless: << pipeline.parameters.run_tests >>
        jobs:
            - prepare-dependencies
            - linter:
                requires:
                    - prepare-dependencies
            - unit_tests:
                requires:
                    - prepare-dependencies
            - publish:
                requires:
                    - unit_tests
                    - linter
                filters:
                    branches:
                        only:
                            - development
                            - master
